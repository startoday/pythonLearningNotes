1. any and all
all(): # return True if all elements of the iterable are truthy(or if the iterable is empty)
print(all([0,1,2,3])) #False
print(all([])) #True
print(all([char for char in "eio" if char in "aeiou"])) #True
print(all([num for num in [1,2,3] if num %2 == 0 ])) #True
print(all([num for num in [0,2,3] if num %2 == 0 ])) #False
people =["calr", "cass"]
print(all (name[0] == "c" for name in people)) ##True

any(): return True if any elements of the iterable are truthy (if the iterable is empty--false)
print(any([0,1,2,3])) #True
print(any([])) #False


2.generator expression
print(type((name[0] == "c" for name in people))) #<class 'generator'>
# save space, memory, if you only need it once, don't need a list(comprehension) to store then you can use it 

import sys
# A simple comparison of size (in Bytes)
list_comp = sys.getsizeof([x * 10 for x in range(1000)]) #List Comprehension: 9024 byte
gen_exp = sys.getsizeof(x * 10 for x in range(1000)) # Generator Expression: 120 bytes

#Using a Generator Expression
def is_all_strings(lst):
    return all(type(l) == str for l in lst)
 
#Using a List Comprehension
def is_all_strings(lst):
    return all([type(l) == str for l in lst])


3.sorted()
#sorted() returns a new sorted list from the items in iterable
#remember nums.sort() is inplace()!!! -- which is also a list specific method
#sorted method can accept iterable stuff even it is a tuple

more_numbers = [6,1,8,2]
new_numbers = sorted(more_numbers)
new_numbers2 = sorted(more_numbers, reverse = True)
print(more_numbers) #[6, 1, 8, 2]
print(new_numbers) #[1, 2, 6, 8]
print(new_numbers2) # [8, 6, 2, 1]
print(sorted((1,56,3,76))) # [1, 3, 56, 76]

