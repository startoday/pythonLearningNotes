1.what is a function?
- a process for executing a task, reusable
- useful for re-act similar stuff

#stay DRY - Don't Repeat Yourself!
(WET - write everything twice)

#*Abstract away* code for other users

2.function structure
def name_of_function():
  #block of runnable code
 
def say_hi():
	print("what is your name?")
	name = input()
	print(f"hi,  {name}")

say_hi()

def sing_happy_birthday():
	print("Happy birthday to you")
	print("Happy birthday to you")
	print("Happy birthday dear you")
	print("Happy birthday to you")

for i in range(2,4):
	sing_happy_birthday()
	
	
3. return value for functions
#return will exit the function, anthing after return won't be touched
#return will outputs whatever value is placed after the return keyword
#return pops the function off of the call stack

def square_of_7():
	return 7**2

result = square_of_7()
print(result)

from random import random

def filp_coin():
	#random() generate random number 0 - 1 (no 1)
	if(random() > 0.5):
		return "heads"
	else :
		return "tails"

#print(filp_coin())
#if has the same function definination, it will overwrite and pick the bottom one 
def filp_coin():
	#random() generate random number 0 - 1 (no 1)
	if(random() > 0.5):
		return "HEADS"
	else :
		return "TAILS"

print(filp_coin())

#只有一个if条件时if需要在最后，这是为啥？。。 
def generate_evens():
    return [x for x in range(1,50) if x % 2 == 0 ]
    
4. function parameters
def square(num):
	return num * num
print(square(4))  #16

def add(a,b):
	return a + b
print(add(2,3)) #5

#it is better to make function parameter name meaningful

#parameter vs arguments
parameter is a variable in function defination
argument is the actual value of this variable that gets passed to function


5.default parameters
#give power a default value -- the thing happened to pop()
def exponent(num,power = 2):
	return num ** power

print(exponent(2,3))
print(exponent(3))  #9

# the default parameter can be anything, even other functions!
eg : just the name of function, no() aftert name!
def add(a,b):
	return a + b
def math(a,b,fn = add):
	return fn(a,b)

def substract(a,b):
	return a - b

print(math(2,3)) #5
print(math(2,3,substract))  # -1
 
#def math(fn = add, a,b) #error, default has to be at the end or 一路向下
#因为python是按照顺序assign para 的


6.keyword argument
#can specify the argument -- only if we know the name of parameters
print(exponent(power=2, num=5)) #25
#more expilicit, a little more flexibility 
#it is useful when passing a dictionary to a function and unpacking it's values
#注意与 default para 区别



7.scope
#where the variables can be accessed

-variable created in functions are scoped in that function! --only avaiable in that function

-global not in a function
total = 0
def increment():
	total += 1
	return total
increment() #ERROR! local variable 'total' referenced before assignment
#it expect a local variable

total = 0
def increment():
	global total #this key word will work
	total += 1
	return total
print(increment()) # 1
print(increment()) # 2

--nonlocal #let us modify a parent's variables in a child(AKA nested) function
def outer():
	count = 0  #since count is not a gobal variable
	def inner():
		nonlocal count
		count += 1
		return count
	return inner()


