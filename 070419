1. pop(), popitem() in dictionary
pop() #takes a single argument corresponding to a skey and removes that key-value pair from the dictionary
#return the value corresponding to the key that was removed

d = dict (a = 1, b = 2, c = 3)
#d.pop() #error,expected at least 1 arguments
print(d.pop('a')) #1
print(d) #{'b': 2, 'c': 3}
#d.pop(e) #KeyError, e not defined

popitem() #removes a random key in a dictionary -- elements are stored unorderly in a dictionary
f = dict (a = 1, b = 2, c = 3, d = 4, f =5)
print(f.popitem()) #('f', 5)
# print(f.popitem('b')) # error, popitem should take no argument
print(f) # {'a': 1, 'b': 2, 'c': 3, 'd': 4}

update() # update keys and values in a dictionary with another set of key value pairs
#it should takes a dictionary to make it work
first = dict (a = 1, b = 2, c = 3, d = 4, f =5)
second = {}
second.update(first)
print(second) # {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'f': 5}
second['a'] = "haha"
print(second) # {'a': 'haha', 'b': 2, 'c': 3, 'd': 4, 'f': 5}
first.popitem()
print(first) # {'a': 1, 'b': 2, 'c': 3, 'd': 4}
second.update(first)
print(second) # {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'f': 5} #will overwrite the same item, but will not remove things
 
2. for add pairs, can just use[]
# Make a copy of inventory and save it to a variable called stock_list
stock_list = inventory.copy()
# add the value 18 to stock_list under the key "cookie"
stock_list['cookie'] = 18


3. data modeling
#eg of a song play list
playlist = {
	"title" : "papaya",
	"author" : "colt",
	"songs" : [
		{"title" : "song1", "artist" : ["bule"], "duration" : 2.5},
		{"title" : "song2", "artist" : ["genee","djcat"], "duration" : 3.1},
		{"title" : "meo", "artist" : ["pgtwo"], "duration" : 3.7}
	]
}

for song in playlist["songs"]:
	 print(song["title"])

total_length = 0

for time in playlist["songs"]:
	 total_length += time["duration"]
print(total_length)

4. dictionary comprehension
#syntax : { ____ : ___ for ____ in ____}
--iterates over keys by default
--to iterate over keys adn values: using .items()

#return a dictionary
numbers = dict(first = 1, second = 2, third = 3)
squared_numbers = {key: val ** 2 for key, val in numbers.items()}
print(squared_numbers) #{'first': 1, 'second': 4, 'third': 9}

print({num : num/2 for num in range(1,10)})  #return a dictionary
#{1: 0.5, 2: 1.0, 3: 1.5, 4: 2.0, 5: 2.5, 6: 3.0, 7: 3.5, 8: 4.0, 9: 4.5}

str1 = "ABC"
str2 = "789"
combo = {str1[i] : str2[i] for i in range(0, len(str1))}
print(combo) #{'A': '7', 'B': '8', 'C': '9'}

ins = {"name" : "colt", "city" : "seattle", "color" : "purple"}
yelling_ins = {k.upper():v.upper() for k,v in ins.items() }
print(yelling_ins)  #{'NAME': 'COLT', 'CITY': 'SEATTLE', 'COLOR': 'PURPLE'}

--condition logic
num_list =[1, 2, 3, 4]
print({num: ("even" if num % 2 == 0 else "odd") for num in num_list})
#{1: 'odd', 2: 'even', 3: 'odd', 4: 'even'}

yelling_ins2 = {(k.upper() if k is "color" else k):v.upper() for k,v in ins.items() }
print(yelling_ins2)  
#{'name': 'COLT', 'city': 'SEATTLE', 'COLOR': 'PURPLE'}


5.dictionary exercise 
A. Using a dictionary comprehension:
list1 = ["CA", "NJ", "RI"]
list2 = ["California", "New Jersey", "Rhode Island"]
 
answer = {list1[i]: list2[i] for i in range(0,3)}

The "advanced" solution with zip() 

list1 = ["CA", "NJ", "RI"]
list2 = ["California", "New Jersey", "Rhode Island"]
 
dict(zip(list1,list2))  

B.person = [["name", "Jared"], ["job", "Musician"], ["city", "Bern"]]

# use the person variable in your answer
#wrong answer! 不要随便加括号
answer = { (stuff[0]: stuff[1] )for stuff in person} 
#right answer
answer = {stuff[0]: stuff[1] for stuff in person}
answer = dict(person)
answer = {k:v for k, v in person}

C.
answer = {k : 0 for k in "aeiou"}
answer = dict.fromkeys("aeiou", 0)

D. ASCII codes dictionary
answer = {k:chr(k) for k in range(65,91)}
