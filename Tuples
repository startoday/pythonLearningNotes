1. Tuple!
an ordered collection or grouping of items
--immutable!！ list is mutable!
#tuple can have duplicates
nums = (1,2,3,4)
print(type(nums)) #<class 'tuple'>
print(3 in nums) #True
# nums[0] = "change!"  #error 'tuple' object does not support item assignment
# we can have a tuple inside of another tuple
nums2 = (1,2,(3,4),5)
print(nums2.count(3)) # 0 
# print(nums2.index(3)) # error - it does not in the tuple!
print(nums2[2]) #(3, 4)
print(nums2[2][1]) #way to acces 4! 
#slices also work
print(nums2[1:3]) #(2, (3, 4))


2.why use a tuple?
--tuples are faster than lists  -- such as months in a year
--it makes your code safer
--valid keys in a dictionary --- .items() return a tuple to you

3.create and access
#use () or the tuple function
#access stuff just like a list
#注意只有一个元素时，不能直接（1）--是int， 或者加个， 或者用tuple（[])的方法
value = (1)
print(type(value)) #<class 'int'>
value2 = (1,)
print(type(value2)) #<class 'tuple'>


nums = (1,2,3,4)
print(type(nums)) #<class 'tuple'>
print(3 in nums) #True
# nums[0] = "change!"  #error 'tuple' object does not support item assignment

#use a tuple function, which take only one argument(a list) and convert it to a tuple
tuple_num = tuple([1, 234, 5])
print(tuple_num[0]) #1
print(tuple_num[-2]) #234

#use tuple as a key for dictionary
radio = {(103.5) : "music radio",
		 (117.4) : "news channel",
		 (113,119): "random stuff"
}
print(radio) # {103.5: 'music radio', 117.4: 'news channel', (113, 119): 'random stuff'}
print(radio[(103.5)]) #music radio
print(radio[(113, 119)]) #random stuff
print(radio[113, 119]) #random stuff

## you can use a tuple as a key,  but can not use list as a key for dictionary

radio2 = {[113,119]: "random stuff"} #error-- unhashable type: 'list'

4.loop through a tuple 
for loop, while loop

for tup in nums:
	print(tup)

i = len(tuple_num)
while i >= 0:
	print(tuple_num[i-1])
	i -= 1
	
5. count(): returns the number of times a value appears in a tuple
x = (1,2,5,5,5)
print(x.count(2)) #1
print(x.count(5)) #3

6.index(): returns the index at which a value is found in a tuple
#if there are multiple matches, the first match is returned
print(x.index(2)) #1
print(x.index(5)) #2 only the first match's index is returned
x.index(3) #ValueError: tuple.index(x): x not in tuple
