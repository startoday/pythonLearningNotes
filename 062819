1.Some data types:
bool (True, False, the first case has to be capital)
int 
str (a sequence of Unicode chars， “ ” or ‘’)
list（an ordered sequence of values of other data types [1,2,3]) 
dict ( a collection of key: values e.g. {"first_name":"Le", "last_name": "Lei"}


2. Dynamic typing
you can reassign variables to different types
dynamic typing vs statically-typed(variables are stuck with their originally-assigned types)


3. None (case sensitive!)
(python version of NULL)
can set new stuff with None if we haven't assign it 
(want a container, but nothing here, and the type of None is Nonetype--only itself)

4.Declaring strings
doesn't matter if single or double, but better to stay it consistant

msg = "he said "hello there !""  --- error, python read it "XX" +YY""
msg2 = "he said 'hello there !'"  --- good 
msg3 = 'he said "hello there !"'  --- good

5.escape sequence
str_sth = "he said \"ha ha\""  --- good #str is never a good variable name, which you could..


6. string concateration
with “ +”
user = "blue Boy"
print("hello there" + user)  # hello therebuleBoy  ---不会自动给你加空格

8 + "hello"  #error!
guess = 9
print("your guess is" + guess) #error!
name = "col"
name += "S"  # name now  = colS #also works for numbers


7.string format
interpolate  #插入
f-strings (python 3.6+)
x = 10 
formatted = f"I told you {x} times!" #不可以忘了这个f！
#you can also do math in the {}

# in python 2 .format() --play ground only support it
print("the {} is ).format(sth)


first = "Colt"
last = "Steele"

formatted = "First Name: {}, Last Name: {}". format(first, last) #可以直接在string 后加


8. every stirng is indexed, started with 0
"lol"[0]  #l
name = "Chuck"
name[5] # error! max index is 4 ; not counting '\0' (if there is one in python)
name[-1] #k
name[-2] #c 倒着数的嗷


9. convert data types
in string interpolation, data type are implicitly converted into string form
you can explicitly convert type by var2 = type (var1)

deci = 12.213
interger = int(deci) #12
my_list = [1,2,3]
my_list_as_string = string(my_list) # "[1,2,3]"

1/3 ----0.3333
int(99.99) #99 only truncate not around
4/2 ----2.0
